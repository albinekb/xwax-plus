#!/usr/bin/env python

# encoding:utf8

# An xwax scan script

# for use:
#   - xwax (as scanner)
#   - independently as an .xwaxpls file generator
# able to parse folders, files and playlists
#
# By: David Allan
#     Kenneth Allan
#

import sys,os,re
from mutagen.easyid3 import EasyID3
from mutagen.flac import FLAC

usage = """
Usage:	 
    An exwax scan script

    Uses:
      - As a scanner script for folders, files, m3u's and .xwaxpls cache files
      - As an .xwaxpls cache file generator.

    scanning an .xwaxpls file allows tag values to be directly read out of that file,
    instead of scanning every songs tags in the list.

    This saves time when loading big collections of music at the start of exwax

    To create an .xwaxpls file use the script like so:
        ./crate_scan /folder/or/file/path > cache.xwaxpls

"""
debug = False
args = sys.argv[1:]

if len(args) == 0:
    print(usage)
    sys.exit()

def parseFilename(file):
    info = ""
    base = os.path.basename(file)
    guessedAlbum = file.split('/')[-2]
    guessedPerformer = file.split('/')[-3]
    #print guessedAlbum
    vor,ext = os.path.splitext(base)
    infoChunks = vor.split(' - ')

    if infoChunks[0].isdigit():
        infoChunks.pop(0)
    lpieces =  len(infoChunks)

    if lpieces == 1:
        info = guessedPerformer + "\t" + infoChunks[0]
    if lpieces == 2:
        if all(i.isdigit() or i ==" " for i in infoChunks[0] ):
            pieces[0] = guessedPerformer
        info = infoChunks[0]+"\t"+ infoChunks[1]
    if lpieces >= 3:
        if debug: 
            print(infoChunks, file=sys.stderr)
            print("At least 3 parts of information found in filename. Not sure what to do. Truncing last one by default.", file=sys.stderr)
        info = infoChunks[0]+"\t"+ infoChunks[1]
    return info   +"  ("+guessedAlbum+")"

# make list of files out of arguments
files = list()
for arg in args:
    # if its a directory
    print('Scanning ' + arg + '...', file=sys.stderr)
    if os.path.isdir( arg ):
        listOfFiles = list()
        for (dirpath, dirnames, filenames) in os.walk(arg):
            listOfFiles += [os.path.join(dirpath, file) for file in filenames]
        files.extend(listOfFiles)

    # if its a .m3u playlist
    elif arg.endswith('.m3u'):
        m3udir, m3ubase = os.path.split(arg)
        fh = open(arg)
        for line in fh.readlines():
            if line.startswith('/'):
                prefix = ''
            else:
                prefix = m3udir + "/"
            if not line.startswith('#EXTINF'):
                files.append(prefix + line)
                
        fh.close()
        #print files
    # if its a file
    elif os.path.isfile(arg):
        #print "["+arg+"]"
        files.append( arg )
    else:
        die(abb+'Unknown file/dir '+arg)
if debug: print(('DEBUG: files = [%s]'%files))

# take note of bpmless tracks and display at end
bpmless = []

# run through files, using easyID3 
#exts = 'agg oga aac cdaudio mp3 flac wav aif aiff wma'.split()
exts = 'oga cdaudio mp3 flac wav aif aiff'.split()
for currentFile in files:
    currentFile = currentFile.strip()
    #if not currentfile.beginsWith('#'):
    #print >> sys.stderr, "["+currentFile+"]"
    if not os.path.exists((currentFile)):
        warn( warnung + currentFile + " does not exist! Check playlist for typos/Case issues")
        continue
    if currentFile.endswith('.xwaxpls'):
        fh2=open(currentFile)
        toread = fh2.read()
        print(toread )
        fh2.close()
    else:
        vor,ext = os.path.splitext(currentFile)
        ext = ext.replace('.','')
        if ext in exts:
            if debug: print('DEBUG: currentFile = [%s]'%currentFile, file=sys.stderr)
            if ext == 'flac':
                try:
                    audio = FLAC(currentFile)                  
                except Exception as e:
                    print(('Exception! ' + str(e)))
                    audio = FLAC()
            else:
                try:                  
                    audio = EasyID3(currentFile)
                except Exception as e:
                    print('Exception! ' + str(e))
                    audio = EasyID3()
            info = ''
            if audio.get('artist'):
                info += (audio.get('artist')[0])
            info += '\t' 
            if audio.get('title'):
                info += (audio.get('title')[0])
            info += '\t' 
            if audio.get('album'):
                info += (audio.get('album')[0])
            info += '\t' 
            if audio.get('genre'):
                info += (audio.get('genre')[0])
            info += '\t' 
            if audio.get('bpm'):
                print(audio.get('bpm')[0])
                info += (audio.get('bpm')[0])
            #if len( bpm ) <= 1 :
            #    print >> sys.stderr, "No BPM information found in tags."
            #    bpmless.append(currentFile)
            #    continue
            if debug: print(currentFile)
            print(os.path.abspath(currentFile) + '\t' + info)
            #print >> sys.stderr, currentFile + '\t' + info #+ '\t' + bpm
        else:
            if debug: warn( warnung+'Extension [%(ext)s] not supported'%locals() )
        #print 'DEBUG ext = [%s]'%ext
print('Done.', file=sys.stderr)
#print >> sys.stderr,'------------------\nBPM-less tracks:'
#print >> sys.stderr,('\n'.join('{}:  {}'.format(*k) for k in enumerate(bpmless)))
        
